import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.List;

/*
 * Used for opening jar files programmatically.
 *
 * @param <T> describes the class type of new instances that generated by this loader.
 *
 * Meric Oztiryaki 2019
 */
public class ResourceLoader<T> {

    private String directory;

    public ResourceLoader(String directory) {
        this.directory = directory;
    }

    public List<T> loadAllJars(List<String> jarNames) {
        List<String> fileNames = jarNames;
        List<T> jarFiles = new ArrayList<>(fileNames.size());

        for(String fileName: fileNames) {
            jarFiles.add(loadJar(fileName));
        }

        return jarFiles;
    }

    public T loadJar(String jarName) {
        File file = new File(directory + jarName + ".jar");
        try {
            ClassLoader cl = URLClassLoader.newInstance(new URL[]{file.toURI().toURL()});
            Class<?> c = cl.loadClass(jarName);
            return (T) c.newInstance();
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | MalformedURLException var6) {
            var6.printStackTrace();
            return null;
        }
    }

    public static ArrayList<String> loadFileNames(String directory, String fileExtension) {
        File[] files = (new File(directory)).listFiles();
        ArrayList<String> fileNames = new ArrayList();

        for(int i = 0; i < files.length; ++i) {
            if (files[i].getName().endsWith(fileExtension)) {
                String fileName = files[i].getName();
                fileNames.add(fileName.substring(0, fileName.lastIndexOf(".")));
            }
        }

        return fileNames;
    }

}
